/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as AppRouteImport } from './routes/_app'
import { Route as AppIndexRouteImport } from './routes/_app/index'
import { Route as AuthRegisterRouteImport } from './routes/_auth/register'
import { Route as AuthLoginRouteImport } from './routes/_auth/login'
import { Route as AppTransactionsRouteImport } from './routes/_app/transactions'
import { Route as AppSettingsRouteImport } from './routes/_app/settings'
import { Route as AppReportsRouteImport } from './routes/_app/reports'
import { Route as AppAccountsRouteImport } from './routes/_app/accounts'

const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)
const AppTransactionsRoute = AppTransactionsRouteImport.update({
  id: '/transactions',
  path: '/transactions',
  getParentRoute: () => AppRoute,
} as any)
const AppSettingsRoute = AppSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AppRoute,
} as any)
const AppReportsRoute = AppReportsRouteImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => AppRoute,
} as any)
const AppAccountsRoute = AppAccountsRouteImport.update({
  id: '/accounts',
  path: '/accounts',
  getParentRoute: () => AppRoute,
} as any)

export interface FileRoutesByFullPath {
  '/accounts': typeof AppAccountsRoute
  '/reports': typeof AppReportsRoute
  '/settings': typeof AppSettingsRoute
  '/transactions': typeof AppTransactionsRoute
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/': typeof AppIndexRoute
}
export interface FileRoutesByTo {
  '/accounts': typeof AppAccountsRoute
  '/reports': typeof AppReportsRoute
  '/settings': typeof AppSettingsRoute
  '/transactions': typeof AppTransactionsRoute
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/': typeof AppIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteWithChildren
  '/_auth': typeof AuthRouteWithChildren
  '/_app/accounts': typeof AppAccountsRoute
  '/_app/reports': typeof AppReportsRoute
  '/_app/settings': typeof AppSettingsRoute
  '/_app/transactions': typeof AppTransactionsRoute
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/register': typeof AuthRegisterRoute
  '/_app/': typeof AppIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/accounts'
    | '/reports'
    | '/settings'
    | '/transactions'
    | '/login'
    | '/register'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/accounts'
    | '/reports'
    | '/settings'
    | '/transactions'
    | '/login'
    | '/register'
    | '/'
  id:
    | '__root__'
    | '/_app'
    | '/_auth'
    | '/_app/accounts'
    | '/_app/reports'
    | '/_app/settings'
    | '/_app/transactions'
    | '/_auth/login'
    | '/_auth/register'
    | '/_app/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_auth/register': {
      id: '/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_app/transactions': {
      id: '/_app/transactions'
      path: '/transactions'
      fullPath: '/transactions'
      preLoaderRoute: typeof AppTransactionsRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/settings': {
      id: '/_app/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AppSettingsRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/reports': {
      id: '/_app/reports'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof AppReportsRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/accounts': {
      id: '/_app/accounts'
      path: '/accounts'
      fullPath: '/accounts'
      preLoaderRoute: typeof AppAccountsRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRouteChildren {
  AppAccountsRoute: typeof AppAccountsRoute
  AppReportsRoute: typeof AppReportsRoute
  AppSettingsRoute: typeof AppSettingsRoute
  AppTransactionsRoute: typeof AppTransactionsRoute
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppAccountsRoute: AppAccountsRoute,
  AppReportsRoute: AppReportsRoute,
  AppSettingsRoute: AppSettingsRoute,
  AppTransactionsRoute: AppTransactionsRoute,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
